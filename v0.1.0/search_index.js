var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = QInsControlCore","category":"page"},{"location":"#QInsControlCore","page":"Home","title":"QInsControlCore","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for QInsControlCore.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package is used to resolve conflicts when multiple coprocesses send commands to the same instrument simultaneously.","category":"page"},{"location":"#install","page":"Home","title":"install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"before you install this package, you must make sure that you have installed the NI VISA.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]\n(@v1.9) pkg> add https://github.com/FaresX/QInsControlCore.jl.git","category":"page"},{"location":"#usage","page":"Home","title":"usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using QInsControlCore\ncpu = Processor()\nct = Controller(\"VirtualInstr\", \"VirtualAddress\")\nlogin!(cpu, ct)\nstart!(cpu)\nidn = ct(query, cpu, \"*IDN?\", Val(:query))\nlogout!(cpu, ct)\nstop!(cpu)","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"API/#API","page":"API","title":"API","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Modules = [QInsControlCore]","category":"page"},{"location":"API/#QInsControlCore.Controller","page":"API","title":"QInsControlCore.Controller","text":"Controller(instrnm, addr)\n\nconstruct a Controller to send commands to the instrument determined by (instrnm, addr). A Controller has three ways to send commands to the Processor: wirte read query.\n\njulia> ct(write, cpu, \"*IDN?\", Val(:write))\n\"done\"\n\njulia> ct(read, cpu, Val(:read))\n\"read\"\n\njulia> ct(query, cpu, \"*IDN?\", Val(:query))\n\"query\"\n\nthe commands needed to execute is not necessary to be wirte, read or query.\n\njulia> idn_get(instr) = query(instr, \"*IDN?\")\nidn_get (generic function with 1 method)\n\njulia> ct(idn_get, cpu, Val(:read))\n\"query\"\n\nthe definition of function idn_get must happen before the Controller ct is logged in or one can log out and log in again.\n\n\n\n\n\n","category":"type"},{"location":"API/#QInsControlCore.Processor","page":"API","title":"QInsControlCore.Processor","text":"Processor()\n\nconstruct a Processor to deal with the commands sended into by Controllers.\n\n\n\n\n\n","category":"type"},{"location":"API/#Base.read-Tuple{QInsControlCore.GPIBInstr}","page":"API","title":"Base.read","text":"read(instr)\n\nread the instrument.\n\n\n\n\n\n","category":"method"},{"location":"API/#Base.write-Tuple{QInsControlCore.GPIBInstr, AbstractString}","page":"API","title":"Base.write","text":"write(instr, msg)\n\nwrite some message string to the instrument.\n\n\n\n\n\n","category":"method"},{"location":"API/#QInsControlCore.connect!-Tuple{Any, QInsControlCore.GPIBInstr}","page":"API","title":"QInsControlCore.connect!","text":"connect!(rm, instr)\n\nconnect to an instrument with given ResourceManager rm.\n\nconnect!(instr)\n\nsame but with auto-generated ResourceManager.\n\n\n\n\n\n","category":"method"},{"location":"API/#QInsControlCore.disconnect!-Tuple{QInsControlCore.GPIBInstr}","page":"API","title":"QInsControlCore.disconnect!","text":"disconnect!(instr)\n\ndisconnect the instrument.\n\n\n\n\n\n","category":"method"},{"location":"API/#QInsControlCore.fast!-Tuple{Processor}","page":"API","title":"QInsControlCore.fast!","text":"fast!(cpu::Processor)\n\nchange the cpu mode to fast mode. Default mode is slow mode. The fast mode is not necessary in most cases.\n\n\n\n\n\n","category":"method"},{"location":"API/#QInsControlCore.find_resources-Tuple{Processor}","page":"API","title":"QInsControlCore.find_resources","text":"find_resources(cpu::Processor)\n\nauto-detect available instruments.\n\n\n\n\n\n","category":"method"},{"location":"API/#QInsControlCore.instrument-Tuple{Any, Any}","page":"API","title":"QInsControlCore.instrument","text":"instrument(name, addr)\n\ngenerate an instrument with (name, addr) which automatically determines the type of this instrument.\n\n\n\n\n\n","category":"method"},{"location":"API/#QInsControlCore.isconnected-Tuple{QInsControlCore.GPIBInstr}","page":"API","title":"QInsControlCore.isconnected","text":"isconnected(instr)\n\ndetermine if the instrument is connected.\n\n\n\n\n\n","category":"method"},{"location":"API/#QInsControlCore.login!-Tuple{Processor, Controller}","page":"API","title":"QInsControlCore.login!","text":"login!(cpu::Processor, ct::Controller)\n\nlog the Controller in the Processor which can be done before and after the cpu started.\n\n\n\n\n\n","category":"method"},{"location":"API/#QInsControlCore.logout!-Tuple{Processor, Controller}","page":"API","title":"QInsControlCore.logout!","text":"logout!(cpu::Processor, ct::Controller)\n\nlog the Controller out the Processor.\n\nlogout!(cpu::Processor, addr::String)\n\nlog all the Controllers that control the instrument with address addr out the Processor.\n\n\n\n\n\n","category":"method"},{"location":"API/#QInsControlCore.query-Tuple{QInsControlCore.GPIBInstr, AbstractString}","page":"API","title":"QInsControlCore.query","text":"query(instr, msg; delay=0)\n\nquery the instrument with some message string.\n\n\n\n\n\n","category":"method"},{"location":"API/#QInsControlCore.reconnect!-Tuple{Processor}","page":"API","title":"QInsControlCore.reconnect!","text":"reconnect!(cpu::Processor)\n\nreconnect the instruments that log in the Processor.\n\n\n\n\n\n","category":"method"},{"location":"API/#QInsControlCore.slow!-Tuple{Processor}","page":"API","title":"QInsControlCore.slow!","text":"slow!(cpu::Processor)\n\nchange the cpu mode to slow mode. Default mode is slow mode, which decrease the cpu cost.\n\n\n\n\n\n","category":"method"},{"location":"API/#QInsControlCore.start!-Tuple{Processor}","page":"API","title":"QInsControlCore.start!","text":"start!(cpu::Processor)\n\nstart the Processor.\n\n\n\n\n\n","category":"method"},{"location":"API/#QInsControlCore.stop!-Tuple{Processor}","page":"API","title":"QInsControlCore.stop!","text":"stop!(cpu::Processor)\n\nstop the Processor.\n\n\n\n\n\n","category":"method"}]
}
